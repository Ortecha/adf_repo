{
	"name": "Enrichment Script",
	"properties": {
		"content": {
			"query": "\nUSE [dataverse_montagu_org5a2bcccf] --Specify the name of the database corresponding to your Synapse Link for Dataverse\n\n--=================================================================================================\n--PROVIDE INPUT PARAMETERS:\n--=================================================================================================\nDECLARE\n\t@EnrichedViewDatabase sysname, --Specify the name of the database in which views with enriched entities will be created\n\t@EnrichedViewSchema sysname, --Specify the name of the database schema in which views with enriched entities will be created\n\t@EnrichedColumnSuffix varchar(50), \t--Specify the suffix for columns enriched with human-readable descriptions. For example, the suffix of \"label\" will change a statecode column in the base table to a statelabel column in the enriched view.\n\t@LanguageCode varchar(10), --Specify the language code for localized labels. For example, English - United States is 1033 (https://docs.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a)\n\t@BaseTableSuffix varchar(50), --If applicable, specify the suffix in the names of the base tables or views (e.g., '_partitiond'). The default is an empty string.\n\t@PreviewOnly bit --Indicate whether to preview the SQL Script (without creating the views) = 1 ; Create views = 0;\n\nSET @EnrichedViewDatabase = 'DataverseEnriched'\nSET @EnrichedViewSchema = 'dbo'\nSET @EnrichedColumnSuffix = ''\nSET @LanguageCode = 1033\nSET @BaseTableSuffix = ''\nSET @PreviewOnly = 0\n\n--=================================================================================================\n-- Do not edit the script below this point\n--=================================================================================================\n\n--Get column metadata from the Lake Database managed by Synapse Link for Dataverse\n--The column metadata will be stored as a JSON document in a scalar variable\n--This is needed as a workaround for the limitation of not allowing system objects to be used in distributed queries\nDECLARE @ColumnMetadata nvarchar(MAX), @ColumnMetadataSQL nvarchar(MAX)\n\n--Define the SQL statement to retrieve column metadata from the Lake Database managed by Synapse Link for Dataverse\n--Results will be stored as a JSON document in a variable\nSET @ColumnMetadataSQL = 'SET @ColumnMetadataOUT = (\nSELECT TABLE_SCHEMA, \n\tTABLE_NAME, \n\tCOLUMN_NAME, \n\tORDINAL_POSITION, \n\tDATA_TYPE\nFROM INFORMATION_SCHEMA.COLUMNS \nWHERE TABLE_SCHEMA = ''dbo''\n\tAND TABLE_NAME NOT IN (''OptionsetMetadata'', ''GlobalOptionsetMetadata'',''StateMetadata'',''StatusMetadata'', ''TargetMetadata'')\n\tAND TABLE_NAME LIKE ''%' + @BaseTableSuffix + '''\nFOR JSON AUTO)'\nDECLARE @ParmDefinition NVARCHAR(MAX);  \nSET @ParmDefinition = N'@ColumnMetadataOUT NVARCHAR(MAX) OUTPUT';  \nEXECUTE sp_executesql @ColumnMetadataSQL, @ParmDefinition, @ColumnMetadataOUT=@ColumnMetadata OUTPUT;  \n\n--Declare a variable to store a SQL statement for creating enriched views\nDECLARE @SQL nvarchar(MAX) = ''\n\n; WITH CM AS (\n--Parse column metadata variable and construct a table based on its content\nSELECT JSON_VALUE(CM.value, '$.TABLE_SCHEMA') AS TableSchema,\n\t JSON_VALUE(CM.value, '$.TABLE_NAME') AS TableName,\n\t LEFT(JSON_VALUE(CM.value, '$.TABLE_NAME'), LEN(JSON_VALUE(CM.value, '$.TABLE_NAME'))-LEN(@BaseTableSuffix)) AS EntityName,\n\t JSON_VALUE(CM.value, '$.COLUMN_NAME') AS ColumnName,\n\t CAST(JSON_VALUE(CM.value, '$.ORDINAL_POSITION') AS INT) AS OrdinalPosition,\n\t JSON_VALUE(CM.value, '$.DATA_TYPE') AS DataType\nFROM OPENJSON (@ColumnMetadata) AS CM\n)\n\n, OSM AS (\n--Get Option Set Metadata\nSELECT DISTINCT \n\tEntityName, \n\tOptionSetName, \n\tQUOTENAME(EntityName + '_' + OptionSetName) AS Alias\nFROM dbo.[OptionsetMetadata]\nWHERE LocalizedLabelLanguageCode = @LanguageCode\n)\n\n, GOSM AS (\n--Get Global Option Set Metadata\nSELECT DISTINCT \n\tOptionSetName, \n\tQUOTENAME('Global_' + OptionSetName) AS Alias\nFROM dbo.[GlobalOptionsetMetadata]\nWHERE LocalizedLabelLanguageCode = @LanguageCode\n)\n\n, StateM AS (\n--Get State Metadata\nSELECT DISTINCT \n\tEntityName, \n\tQUOTENAME(EntityName + '_State') AS Alias\nFROM dbo.[StateMetadata]\nWHERE LocalizedLabelLanguageCode = @LanguageCode\n)\n\n, StatusM AS (\n--Get Status Metadata\nSELECT DISTINCT \n\tEntityName,\n\tQUOTENAME(EntityName + '_Status') AS Alias\nFROM dbo.[StatusMetadata]\nWHERE LocalizedLabelLanguageCode = @LanguageCode\n)\n\n, SQLStatement AS (\n--Enumerate all lines in the source table and replace codes with labels where applicable\nSELECT CM.EntityName,\n\t--Before the first column of each table, construct a CREATE OR ALTER VIEW statement\n\tCASE WHEN CM.OrdinalPosition = 1\n\t\tTHEN 'CREATE OR ALTER VIEW ' + QUOTENAME(@EnrichedViewSchema) + '.' + CM.EntityName + '\n\t\tAS\n\t\tSELECT '\n\t\tELSE '\t,'\n\t\tEND\n\t--For each column, check if it needs to be replaced with a suitable localized label\n\t+ CASE \n\t\tWHEN OSM.OptionSetName IS NOT NULL THEN OSM.Alias + '.[LocalizedLabel] AS ' + REPLACE(QUOTENAME(CM.ColumnName), 'code]', @EnrichedColumnSuffix + ']')\n\t\tWHEN GOSM.OptionSetName IS NOT NULL THEN GOSM.Alias + '.[LocalizedLabel] AS ' + REPLACE(QUOTENAME(CM.ColumnName), 'code]', @EnrichedColumnSuffix + ']')\n\t\tWHEN StateM.EntityName IS NOT NULL THEN StateM.Alias + '.[LocalizedLabel] AS ' + REPLACE(QUOTENAME(CM.ColumnName), 'code]', @EnrichedColumnSuffix + ']')\n\t\tWHEN StatusM.EntityName IS NOT NULL THEN StatusM.Alias + '.[LocalizedLabel] AS ' + REPLACE(QUOTENAME(CM.ColumnName), 'code]', @EnrichedColumnSuffix + ']')\n\t\tELSE '[Base].' + QUOTENAME(CM.ColumnName)\n\t\tEND AS [SQLLine],\n\tCM.OrdinalPosition\nFROM CM \n\tLEFT JOIN OSM\n\t\tON CM.EntityName = OSM.EntityName\n\t\tAND CM.ColumnName = OSM.OptionSetName\n\t\tAND CM.DataType LIKE '%int' --Only include columns with integer data type\n\tLEFT JOIN GOSM\n\t\tON CM.ColumnName = GOSM.OptionSetName\n\t\tAND CM.DataType LIKE '%int' --Only include columns with integer data type\n\tLEFT JOIN StateM\n\t\tON CM.EntityName = StateM.EntityName\n\t\tAND CM.ColumnName = 'statecode'\n\t\tAND CM.DataType LIKE '%int' --Only include columns with integer data type\n\tLEFT JOIN StatusM\n\t\tON CM.EntityName = StatusM.EntityName\n\t\tAND CM.ColumnName = 'statuscode'\n\t\tAND CM.DataType LIKE '%int' --Only include columns with integer data type\n\nUNION ALL\n--Construct the first line of the FROM clause, referencing external tables created by Synapse Link for Dataverse\nSELECT DISTINCT\nCM.EntityName,\n'FROM ' + QUOTENAME(DB_NAME()) + '.' + QUOTENAME(CM.TableSchema) + '.' + QUOTENAME(CM.TableName) + ' AS Base' AS SQLLine,\n10000 AS OrdinalPosition\nFROM CM\n\nUNION ALL \n--Construct LEFT JOIN statements for each relevant OptionSetMetadata field\nSELECT DISTINCT OSM.EntityName AS EntityName,\n'\tLEFT JOIN ' + QUOTENAME(DB_NAME()) + '.[dbo].[OptionSetMetadata] AS ' + OSM.Alias + ' \n\t\tON ' + OSM.Alias + '.EntityName = ''' + OSM.EntityName + ''' \n\t\tAND ' + OSM.Alias + '.OptionSetName = ''' +  OSM.OptionSetName + '''\n\t\tAND [Base].' + QUOTENAME(OSM.OptionSetName) + ' = ' + OSM.Alias + '.[Option]\n\t\tAND ' + OSM.Alias + '.LocalizedLabelLanguageCode = ' + @LanguageCode + '' AS SQLLine,\n20000 AS OrdinalPosition\nFROM OSM\n\tJOIN CM\n\t\tON CM.EntityName = OSM.EntityName\n\t\tAND CM.ColumnName = OSM.OptionSetName\nWHERE CM.DataType LIKE '%int' --Only capture columns with Integer Data Types\n\nUNION ALL \n--Construct LEFT JOIN statements for each relevant GlobalOptionSetMetadata field\nSELECT DISTINCT CM.EntityName AS EntityName,\n'\tLEFT JOIN ' + QUOTENAME(DB_NAME()) + '.[dbo].[GlobalOptionSetMetadata] AS ' + Alias + ' \n\t\tON ' + Alias + '.OptionSetName = ''' +  OptionSetName + '''\n\t\tAND [Base].' + QUOTENAME(OptionSetName) + ' = ' + Alias + '.[Option]\n\t\tAND ' + Alias + '.LocalizedLabelLanguageCode = ' + @LanguageCode + '' AS SQLLine,\n30000 AS OrdinalPosition\nFROM GOSM\n\tJOIN CM\n\t\tON CM.ColumnName = GOSM.OptionSetName\nWHERE CM.DataType LIKE '%int' --Only capture columns with Integer Data Types\n\nUNION ALL \n--Construct LEFT JOIN statements for each relevant State Metadata field\nSELECT DISTINCT CM.EntityName AS EntityName,\n'\tLEFT JOIN ' + QUOTENAME(DB_NAME()) + '.[dbo].[StateMetadata] AS ' + StateM.Alias + ' \n\t\tON ' + StateM.Alias + '.EntityName = ''' + StateM.EntityName + ''' \n\t\tAND [Base].statecode' + ' = ' + StateM.Alias + '.[State]\n\t\tAND ' + StateM.Alias + '.LocalizedLabelLanguageCode = ' + @LanguageCode + '' AS SQLLine,\n40000 AS OrdinalPosition\nFROM StateM\n\tJOIN CM\n\t\tON CM.EntityName = StateM.EntityName\n\t\tAND CM.ColumnName = 'statecode'\nWHERE CM.DataType LIKE '%int' --Only capture columns with Integer Data Types\n\nUNION ALL\n--Construct LEFT JOIN statements for each relevant Status Metadata field\nSELECT DISTINCT CM.EntityName AS EntityName,\n'\tLEFT JOIN ' + QUOTENAME(DB_NAME()) + '.[dbo].[StatusMetadata] AS ' + StatusM.Alias + ' \n\t\tON ' + StatusM.Alias + '.EntityName = ''' + StatusM.EntityName + ''' \n\t\tAND [Base].statuscode' + ' = ' + StatusM.Alias + '.[Status]\n\t\tAND ' + StatusM.Alias + '.LocalizedLabelLanguageCode = ' + @LanguageCode + '' AS SQLLine,\n40000 AS OrdinalPosition\nFROM StatusM\n\tJOIN CM\n\t\tON CM.EntityName = StatusM.EntityName\n\t\tAND CM.ColumnName = 'statuscode'\nWHERE CM.DataType LIKE '%int' --Only capture columns with Integer Data Types\n\nUNION ALL\n--Add statement terminator\nSELECT DISTINCT\nEntityName,\n'; ' + CHAR(10) AS SQLLine,\n100000 AS OrdinalPosition\nFROM CM\n)\n\n--Construct individual statements to create views (1 view per row)\n--Since CREATE VIEW statement must be the first statement in a batch, assign each view definition to a variable \n--and use the EXEC(@variable) command to create view as part of its own, separate batch.\n, ViewDefinitions AS (\nSELECT 'DECLARE @' + EntityName + ' NVARCHAR(MAX) = ''\n\t' + REPLACE(STRING_AGG(CAST(SQLLine as varchar(MAX)), CHAR(10)) WITHIN GROUP (ORDER BY EntityName, OrdinalPosition, SQLLine), '''', '''''') + ''' ' + CHAR(10) + 'EXEC [' + @EnrichedViewDatabase + '].dbo.sp_executesql @' + EntityName + CHAR(10) AS ViewDefinition\nFROM SQLStatement\nGROUP BY EntityName\n)\n\n--Construct a comprehensive SQL statement to create all views\nSELECT @SQL = STRING_AGG(ViewDefinition, ';' + CHAR(10) + CHAR(10))\nFROM ViewDefinitions\n\n--Return a preview of the SQL Script to be generated or go ahead and create the views.\nIF @PreviewOnly = 1\nBEGIN\n\t--Return the final SQL statement\n\tSELECT '--================================================================================================='+ CHAR(10) +' ' + CHAR(10) AS [--SQL Statement]\n\tUNION ALL \n\tSELECT '-- A preview of the script to generate enriched views is provided below.'  AS [--SQL Statement]\n\tUNION ALL \n\tSELECT '-- No database objects have been created.' AS [--SQL Statement]\n\tUNION ALL \n\tSELECT '-- Re-run this script with the @PreviewOnly parameter set to 0 to actually create the views.' AS [--SQL Statement]\n\tUNION ALL \n\tSELECT '--================================================================================================='+ CHAR(10) +' ' + CHAR(10) AS [--SQL Statement]\n\tUNION ALL \n\tSELECT VALUE AS [--SQL Statement] FROM STRING_SPLIT(@SQL, CHAR(10))\nEND\nELSE\nBEGIN\n\t--Execute the SQL statement\n\tPRINT 'Beginning view creation'\n\tEXEC sp_executesql @SQL\n\tPRINT 'Completed view creation'\nEND",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "dataverse_montagu_org5a2bcccf",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}